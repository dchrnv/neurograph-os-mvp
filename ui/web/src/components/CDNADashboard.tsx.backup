import { useState, useEffect } from 'react'

interface Dimension {
  id: string
  name: string
  icon: string
  default: number
  min: number
  max: number
  green: [number, number]
  yellow: [number, number]
  red: [number, number]
}

interface Profile {
  name: string
  scales: number[]
  description: string
  restricted?: boolean
  maxChange?: number
  requireValidation?: boolean
}

const dimensions: Dimension[] = [
  { id: 'physical', name: 'PHYSICAL', icon: 'üèÉ', default: 1.0, min: 0, max: 20, green: [1, 5], yellow: [5, 15], red: [15, 20] },
  { id: 'sensory', name: 'SENSORY', icon: 'üëÅÔ∏è', default: 1.5, min: 0, max: 20, green: [1, 5], yellow: [5, 15], red: [15, 20] },
  { id: 'motor', name: 'MOTOR', icon: '‚úã', default: 1.2, min: 0, max: 20, green: [1, 5], yellow: [5, 15], red: [15, 20] },
  { id: 'emotional', name: 'EMOTIONAL', icon: '‚ù§Ô∏è', default: 2.0, min: 0, max: 20, green: [1, 8], yellow: [8, 15], red: [15, 20] },
  { id: 'cognitive', name: 'COGNITIVE', icon: 'üß†', default: 3.0, min: 0, max: 30, green: [1, 15], yellow: [15, 25], red: [25, 30] },
  { id: 'social', name: 'SOCIAL', icon: 'üë•', default: 2.5, min: 0, max: 20, green: [1, 10], yellow: [10, 15], red: [15, 20] },
  { id: 'temporal', name: 'TEMPORAL', icon: '‚è∞', default: 2.0, min: 0, max: 20, green: [1, 8], yellow: [8, 15], red: [15, 20] },
  { id: 'abstract', name: 'ABSTRACT', icon: 'üí≠', default: 10.0, min: 0, max: 50, green: [1, 20], yellow: [20, 40], red: [40, 50] }
]

const profiles: Record<string, Profile> = {
  explorer: {
    name: 'Explorer',
    scales: [1.0, 1.5, 1.2, 2.0, 3.0, 2.5, 2.0, 5.0],
    description: '–°–≤–æ–±–æ–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –≤—ã—Å–æ–∫–∞—è –ø–ª–∞—Å—Ç–∏—á–Ω–æ—Å—Ç—å'
  },
  analyzer: {
    name: 'Analyzer',
    scales: [1.0, 1.0, 1.0, 1.5, 10.0, 5.0, 3.0, 20.0],
    description: '–°—Ç—Ä–æ–≥–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –Ω–∏–∑–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è'
  },
  creative: {
    name: 'Creative',
    scales: [1.0, 2.0, 3.0, 5.0, 8.0, 13.0, 21.0, 34.0],
    description: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º'
  },
  quarantine: {
    name: 'Quarantine',
    scales: [1.0, 1.0, 1.0, 1.0, 2.0, 1.5, 1.0, 3.0],
    description: '–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
    restricted: true,
    maxChange: 0.5,
    requireValidation: true
  }
}

const profileIcons: Record<string, string> = {
  explorer: 'üîç',
  analyzer: 'üî¨',
  creative: 'üé®',
  quarantine: 'üõ°Ô∏è'
}

export default function CDNADashboard() {
  const [currentProfile, setCurrentProfile] = useState('explorer')
  const [currentValues, setCurrentValues] = useState<number[]>([...profiles.explorer.scales])
  const [isQuarantineActive, setIsQuarantineActive] = useState(false)
  const [quarantineTime, setQuarantineTime] = useState(300)
  const [quarantineProgress, setQuarantineProgress] = useState(0)
  const [history, setHistory] = useState<Array<{ time: string; desc: string; impact: string }>>([
    { time: '–°–µ–π—á–∞—Å (–∞–∫—Ç–∏–≤–Ω–∞)', desc: '–ü—Ä–æ—Ñ–∏–ª—å: Explorer', impact: '' }
  ])

  const getZoneStatus = (value: number, dim: Dimension): 'green' | 'yellow' | 'red' => {
    if (value >= dim.green[0] && value <= dim.green[1]) return 'green'
    if (value > dim.green[1] && value <= dim.yellow[1]) return 'yellow'
    return 'red'
  }

  const updateValue = (index: number, value: number) => {
    const profile = profiles[currentProfile]

    if (profile.restricted && profile.maxChange) {
      const originalValue = profile.scales[index]
      const diff = Math.abs(value - originalValue)

      if (diff > profile.maxChange) {
        value = value > originalValue
          ? originalValue + profile.maxChange
          : originalValue - profile.maxChange
      }
    }

    const newValues = [...currentValues]
    newValues[index] = value
    setCurrentValues(newValues)
  }

  const switchProfile = (profileId: string) => {
    if (profileId === currentProfile) return

    setCurrentProfile(profileId)
    setCurrentValues([...profiles[profileId].scales])

    setHistory(prev => [
      { time: '–°–µ–π—á–∞—Å (–∞–∫—Ç–∏–≤–Ω–∞)', desc: `–ü—Ä–æ—Ñ–∏–ª—å: ${profiles[profileId].name}`, impact: '' },
      ...prev.map((item, idx) => ({
        ...item,
        time: idx === 0 ? '1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥' : item.time
      }))
    ])
  }

  const proposeChanges = () => {
    setIsQuarantineActive(true)
    let timeLeft = 300

    const interval = setInterval(() => {
      timeLeft -= 1
      setQuarantineTime(timeLeft)
      setQuarantineProgress(((300 - timeLeft) / 300) * 100)

      if (timeLeft <= 0) {
        clearInterval(interval)
        applyChanges()
      }
    }, 100) // Accelerated for demo
  }

  const applyChanges = () => {
    setIsQuarantineActive(false)
    setQuarantineTime(300)
    setQuarantineProgress(0)

    setHistory(prev => [
      { time: '–°–µ–π—á–∞—Å (–∞–∫—Ç–∏–≤–Ω–∞)', desc: profiles[currentProfile].name, impact: '' },
      { time: '–¢–æ–ª—å–∫–æ —á—Ç–æ', desc: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã ‚úì', impact: 'medium' },
      ...prev.slice(1)
    ])

    alert('‚úì –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!\n\n–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.')
  }

  const cancelQuarantine = () => {
    setIsQuarantineActive(false)
    setQuarantineTime(300)
    setQuarantineProgress(0)
    switchProfile(currentProfile)
    alert('‚úï –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.\n\n–°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–∞—á–µ–Ω–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏.')
  }

  const resetToDefaults = () => {
    if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
      switchProfile('explorer')
      alert('‚Ü∫ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ –ø—Ä–æ—Ñ–∏–ª—é "Explorer"')
    }
  }

  const exportCDNA = () => {
    const cdnaData = {
      version: '2.1.0',
      profile: currentProfile,
      dimension_scales: currentValues,
      timestamp: new Date().toISOString()
    }

    const dataStr = JSON.stringify(cdnaData, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)

    const link = document.createElement('a')
    link.href = url
    link.download = `cdna_${currentProfile}_${Date.now()}.json`
    link.click()

    URL.revokeObjectURL(url)
  }

  return (
    <div className="cdna-container">
      {/* Header */}
      <div className="cdna-header">
        <div className="cdna-header-content">
          <h2 className="cdna-title">üß¨ CDNA v2.1 ‚Äî Constitutional Layer</h2>
          <p className="cdna-subtitle">Cognitive DNA Configuration Manager</p>

          <div className="cdna-status-bar">
            <div className={`cdna-status-badge ${isQuarantineActive ? 'quarantine' : 'stable'}`}>
              <span>‚óè</span>
              <span>{isQuarantineActive ? 'QUARANTINE' : 'STABLE'}</span>
            </div>
            <div className="cdna-status-badge info">
              <span>üì¶</span>
              <span>384 bytes</span>
            </div>
            <div className="cdna-status-badge info">
              <span>‚ö°</span>
              <span>6 cache lines</span>
            </div>
          </div>
        </div>
      </div>

      <div className="cdna-main-grid">
        {/* Sidebar */}
        <div className="cdna-sidebar">
          {/* Profiles */}
          <div className="card">
            <div className="card-header">
              <span className="card-title">üìã PROFILES</span>
            </div>
            <div className="cdna-profile-list">
              {Object.entries(profiles).map(([id, profile]) => (
                <div
                  key={id}
                  className={`cdna-profile-item ${currentProfile === id ? 'active' : ''}`}
                  onClick={() => switchProfile(id)}
                >
                  <div className="cdna-profile-icon">{profileIcons[id]}</div>
                  <div className="cdna-profile-info">
                    <div className="cdna-profile-name">{profile.name}</div>
                    <div className="cdna-profile-desc">{profile.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* History */}
          <div className="card">
            <div className="card-header">
              <span className="card-title">üìú HISTORY</span>
            </div>
            <div className="cdna-history-list">
              {history.slice(0, 5).map((item, idx) => (
                <div key={idx} className={`cdna-history-item ${idx === 0 ? 'current' : ''}`}>
                  <div className="cdna-history-time">{item.time}</div>
                  <div className="cdna-history-desc">
                    {item.desc}
                    {item.impact && (
                      <span className={`cdna-impact-badge impact-${item.impact}`}>
                        {item.impact.toUpperCase()}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="cdna-content-area">
          {/* Quarantine Panel */}
          {isQuarantineActive && (
            <div className="cdna-quarantine-panel">
              <div className="cdna-quarantine-header">
                <div className="cdna-quarantine-icon">‚è±Ô∏è</div>
                <div className="cdna-quarantine-info">
                  <h3>–†–µ–∂–∏–º –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –∞–∫—Ç–∏–≤–µ–Ω</h3>
                  <p>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: <span>{quarantineTime}</span>—Å –æ—Å—Ç–∞–ª–æ—Å—å</p>
                </div>
              </div>

              <div className="cdna-progress-bar">
                <div
                  className="cdna-progress-fill"
                  style={{ width: `${quarantineProgress}%` }}
                />
              </div>

              <div className="cdna-metrics-grid">
                <div className="cdna-metric-card">
                  <div className="cdna-metric-value">+8%</div>
                  <div className="cdna-metric-label">–†–æ—Å—Ç –ø–∞–º—è—Ç–∏</div>
                  <div className="cdna-metric-status ok">‚úì OK (&lt; 20%)</div>
                </div>
                <div className="cdna-metric-card">
                  <div className="cdna-metric-value">3</div>
                  <div className="cdna-metric-label">–†–∞–∑—Ä—ã–≤—ã —Å–≤—è–∑–µ–π</div>
                  <div className="cdna-metric-status ok">‚úì OK (&lt; 10)</div>
                </div>
                <div className="cdna-metric-card">
                  <div className="cdna-metric-value">12%</div>
                  <div className="cdna-metric-label">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤</div>
                  <div className="cdna-metric-status ok">‚úì OK (&lt; 30%)</div>
                </div>
              </div>

              <div className="controls">
                <button className="button" onClick={applyChanges}>
                  <span>‚úì</span> –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å
                </button>
                <button className="button danger" onClick={cancelQuarantine}>
                  <span>‚úï</span> –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          )}

          {/* Dimension Controls */}
          <div className="card">
            <div className="card-header">
              <span className="card-title">üéõÔ∏è DIMENSION SCALES</span>
            </div>
            <div className="cdna-dimension-controls">
              {dimensions.map((dim, index) => (
                <div key={dim.id} className="cdna-dimension-card">
                  <div className="cdna-dimension-header">
                    <span className="cdna-dimension-name">{dim.icon} {dim.name}</span>
                    <span className="cdna-dimension-value">{currentValues[index].toFixed(1)}</span>
                  </div>

                  <div className="cdna-zones-indicator">
                    <div className="cdna-zone green">üü¢ Safe</div>
                    <div className="cdna-zone yellow">üü° Caution</div>
                    <div className="cdna-zone red">üî¥ Danger</div>
                  </div>

                  <input
                    type="range"
                    className="cdna-slider"
                    min={dim.min}
                    max={dim.max}
                    step={0.1}
                    value={currentValues[index]}
                    onChange={(e) => updateValue(index, parseFloat(e.target.value))}
                    style={{
                      background: `linear-gradient(90deg,
                        #48bb78 0%,
                        #48bb78 ${(dim.green[1] / dim.max) * 100}%,
                        #ecc94b ${(dim.green[1] / dim.max) * 100}%,
                        #ecc94b ${(dim.yellow[1] / dim.max) * 100}%,
                        #f56565 ${(dim.yellow[1] / dim.max) * 100}%,
                        #f56565 100%)`
                    }}
                  />

                  <div className="cdna-zone-labels">
                    <span>{dim.min}</span>
                    <span>{dim.green[1]}</span>
                    <span>{dim.yellow[1]}</span>
                    <span>{dim.max}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Actions */}
          <div className="card">
            <div className="card-header">
              <span className="card-title">‚öôÔ∏è ACTIONS</span>
            </div>
            <div className="controls">
              <button className="button" onClick={proposeChanges}>
                <span>üß™</span> Test Changes
              </button>
              <button className="button" onClick={resetToDefaults}>
                <span>‚Ü∫</span> Reset to Defaults
              </button>
              <button className="button" onClick={exportCDNA}>
                <span>üíæ</span> Export CDNA
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
