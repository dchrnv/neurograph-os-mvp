import { useState, useRef, useEffect } from 'react'

interface DimensionInfo {
  name: string
  icon: string
  description: string
  examples: string[]
  safeRange: string
  impact: string
}

const dimensionInfo: Record<string, DimensionInfo> = {
  physical: {
    name: 'Physical',
    icon: 'üèÉ',
    description: '–§–∏–∑–∏—á–µ—Å–∫–æ–µ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞—Å—à—Ç–∞–± –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–µ—Ç—Ä–∞—Ö.',
    examples: ['–ü–æ–∑–∏—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤', '–†–∞—Å—Å—Ç–æ—è–Ω–∏—è', '–¢—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è'],
    safeRange: '1-5',
    impact: '–í–ª–∏—è–µ—Ç –Ω–∞ spatial queries –∏ field calculations'
  },
  sensory: {
    name: 'Sensory',
    icon: 'üëÅÔ∏è',
    description: '–°–µ–Ω—Å–æ—Ä–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ. –°–∞–ª–∏–µ–Ω—Ç–Ω–æ—Å—Ç—å, –≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å, –Ω–æ–≤–∏–∑–Ω–∞ —Å—Ç–∏–º—É–ª–æ–≤.',
    examples: ['–Ø—Ä–∫–æ—Å—Ç—å', '–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å', '–í–Ω–∏–º–∞–Ω–∏–µ'],
    safeRange: '1-5',
    impact: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–º—É–ª–æ–≤'
  },
  motor: {
    name: 'Motor',
    icon: '‚úã',
    description: '–ú–æ—Ç–æ—Ä–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. –°–∫–æ—Ä–æ—Å—Ç—å, —É—Å–∫–æ—Ä–µ–Ω–∏–µ, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–π.',
    examples: ['Velocity', 'Acceleration', 'Precision'],
    safeRange: '1-5',
    impact: '–í–ª–∏—è–µ—Ç –Ω–∞ –¥–∏–Ω–∞–º–∏–∫—É —Å–∏—Å—Ç–µ–º—ã'
  },
  emotional: {
    name: 'Emotional',
    icon: '‚ù§Ô∏è',
    description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ VAD –º–æ–¥–µ–ª–∏ (Valence, Arousal, Dominance).',
    examples: ['–†–∞–¥–æ—Å—Ç—å (0.8, 0.6, 0.7)', '–°—Ç—Ä–∞—Ö (0.2, 0.8, 0.3)', '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ (0.5, 0.2, 0.5)'],
    safeRange: '1-8',
    impact: '–ú–æ–¥—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π'
  },
  cognitive: {
    name: 'Cognitive',
    icon: 'üß†',
    description: '–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, —É—Ä–æ–≤–µ–Ω—å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏—è—Ö.',
    examples: ['Working memory load', 'Abstraction level', 'Confidence'],
    safeRange: '1-15',
    impact: '–°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
  },
  social: {
    name: 'Social',
    icon: 'üë•',
    description: '–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ. –î–∏—Å—Ç–∞–Ω—Ü–∏—è, —Å—Ç–∞—Ç—É—Å, –≥—Ä—É–ø–ø–æ–≤–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å.',
    examples: ['Personal space', 'Authority', 'Group membership'],
    safeRange: '1-10',
    impact: '–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç'
  },
  temporal: {
    name: 'Temporal',
    icon: '‚è∞',
    description: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è. –°–º–µ—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–∏, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á–∞—Å—Ç–æ—Ç–∞.',
    examples: ['Time offset', 'Duration', 'Frequency'],
    safeRange: '1-8',
    impact: '–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏'
  },
  abstract: {
    name: 'Abstract',
    icon: 'üí≠',
    description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –ë–ª–∏–∑–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π, –∫–∞—É–∑–∞–ª—å–Ω–æ—Å—Ç—å, –º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å.',
    examples: ['Word embeddings', 'Concept similarity', 'Logic relations'],
    safeRange: '1-20',
    impact: '–û—Å–Ω–æ–≤–∞ –¥–ª—è semantic queries, —Å–∞–º–æ–µ –≥–∏–±–∫–æ–µ'
  }
}

interface DimensionTooltipProps {
  dimensionId: string
  children: React.ReactNode
}

export default function DimensionTooltip({ dimensionId, children }: DimensionTooltipProps) {
  const [isVisible, setIsVisible] = useState(false)
  const [position, setPosition] = useState<'right' | 'left'>('right')
  const wrapperRef = useRef<HTMLDivElement>(null)
  const info = dimensionInfo[dimensionId]

  useEffect(() => {
    if (isVisible && wrapperRef.current) {
      const rect = wrapperRef.current.getBoundingClientRect()
      const windowWidth = window.innerWidth

      // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —ç–∫—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º tooltip —Å–ª–µ–≤–∞
      if (rect.right > windowWidth / 2) {
        setPosition('left')
      } else {
        setPosition('right')
      }
    }
  }, [isVisible])

  if (!info) return <>{children}</>

  return (
    <div
      ref={wrapperRef}
      className="tooltip-wrapper"
      onMouseEnter={() => setIsVisible(true)}
      onMouseLeave={() => setIsVisible(false)}
    >
      {children}
      {isVisible && (
        <div className={`dimension-tooltip tooltip-${position}`}>
          <div className="tooltip-header">
            <span className="tooltip-icon">{info.icon}</span>
            <span className="tooltip-name">{info.name}</span>
          </div>
          <div className="tooltip-body">
            <p className="tooltip-description">{info.description}</p>

            <div className="tooltip-section">
              <strong>–ü—Ä–∏–º–µ—Ä—ã:</strong>
              <ul>
                {info.examples.map((ex, i) => (
                  <li key={i}>{ex}</li>
                ))}
              </ul>
            </div>

            <div className="tooltip-section">
              <strong>–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω:</strong> {info.safeRange}
            </div>

            <div className="tooltip-section">
              <strong>–í–ª–∏—è–Ω–∏–µ:</strong> {info.impact}
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
