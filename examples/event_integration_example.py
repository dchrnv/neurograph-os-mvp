"""
NeuroGraph OS - Event System Integration Examples
–ü—Ä–∏–º–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Event Bus —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

–ü—É—Ç—å: examples/event_integration_example.py
"""

import asyncio
from typing import Dict, Any, List
from datetime import datetime

from core.events import (
    Event, EventType, EventCategory, EventPriority, EventFilter,
    EventBus, EventHandler, EventEmitter, event_publisher,
    start_event_bus, stop_event_bus, get_event_bus
)


print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë        NeuroGraph OS - Event System Integration Example            ‚ïë
‚ïë                 Full Component Integration Demo                     ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1: TokenService —Å —Å–æ–±—ã—Ç–∏—è–º–∏
# =============================================================================

class TokenService(EventEmitter):
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, event_bus: EventBus):
        super().__init__(event_bus, source_id="token_service")
        self.tokens = {}
        print("‚úÖ TokenService initialized")
    
    @event_publisher(EventType.TOKEN_CREATED)
    async def create_token(self, token_id: str, coordinates: list, data: dict) -> dict:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"""
        token = {
            "id": token_id,
            "coordinates": coordinates,
            "data": data,
            "created_at": datetime.now().timestamp()
        }
        self.tokens[token_id] = token
        
        print(f"üéØ TokenService: Created token {token_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Å–ª–æ–≤–∞—Ä—å —Å—Ç–∞–Ω–µ—Ç payload —Å–æ–±—ã—Ç–∏—è
        return {
            "token_id": token_id,
            "coordinates": coordinates,
            "token_type": data.get("type", "unknown")
        }
    
    async def update_token(self, token_id: str, updates: dict) -> None:
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω"""
        if token_id not in self.tokens:
            await self.emit_error(
                error_type="token_not_found",
                error_message=f"Token {token_id} not found",
                error_details={"token_id": token_id}
            )
            return
        
        self.tokens[token_id].update(updates)
        
        print(f"üîÑ TokenService: Updated token {token_id}")
        
        await self.emit(
            EventType.TOKEN_UPDATED,
            payload={
                "token_id": token_id,
                "updates": updates
            },
            priority=EventPriority.NORMAL
        )
    
    async def activate_token(self, token_id: str, activation_level: float) -> None:
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω (–≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ)"""
        if token_id not in self.tokens:
            return
        
        self.tokens[token_id]["activation"] = activation_level
        
        priority = EventPriority.HIGH if activation_level > 0.8 else EventPriority.NORMAL
        
        print(f"‚ö° TokenService: Activated token {token_id} (level={activation_level:.2f}, priority={priority.name})")
        
        await self.emit(
            EventType.TOKEN_ACTIVATED,
            payload={
                "token_id": token_id,
                "activation_level": activation_level
            },
            priority=priority
        )


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: GraphManager —Å —Å–æ–±—ã—Ç–∏—è–º–∏
# =============================================================================

class GraphManager(EventEmitter):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ–±—ã—Ç–∏–π"""
    
    def __init__(self, event_bus: EventBus):
        super().__init__(event_bus, source_id="graph_manager")
        self.connections = []
        self.tokens = set()
        print("‚úÖ GraphManager initialized")
    
    async def add_connection(
        self,
        source_id: str,
        target_id: str,
        weight: float = 1.0,
        connection_type: str = "spatial"
    ) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–≤—è–∑—å –≤ –≥—Ä–∞—Ñ"""
        connection = {
            "source": source_id,
            "target": target_id,
            "weight": weight,
            "type": connection_type,
            "created_at": datetime.now().timestamp()
        }
        self.connections.append(connection)
        self.tokens.add(source_id)
        self.tokens.add(target_id)
        
        print(f"üîó GraphManager: Added connection {source_id} -> {target_id} (weight={weight})")
        
        await self.emit(
            EventType.GRAPH_CONNECTION_ADDED,
            payload={
                "connection": connection,
                "total_connections": len(self.connections)
            }
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä (–∫–∞–∂–¥—ã–µ 5 —Å–≤—è–∑–µ–π)
        if len(self.connections) % 5 == 0 and len(self.connections) > 0:
            await self._check_for_clusters()
    
    async def _check_for_clusters(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤"""
        if len(self.tokens) >= 3:
            print(f"üéØ GraphManager: Detected cluster with {len(self.tokens)} tokens")
            
            await self.emit(
                EventType.GRAPH_CLUSTER_DETECTED,
                payload={
                    "cluster_size": len(self.tokens),
                    "connections_count": len(self.connections),
                    "density": len(self.connections) / max(1, len(self.tokens))
                },
                priority=EventPriority.HIGH if len(self.tokens) > 5 else EventPriority.NORMAL
            )


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: DNAGuardian —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–æ–±—ã—Ç–∏—è–º–∏
# =============================================================================

class DNAGuardian(EventEmitter):
    """DNA Guardian —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    
    def __init__(self, event_bus: EventBus):
        super().__init__(event_bus, source_id="dna_guardian")
        self.constraints = {
            "max_tokens": 1000,
            "max_connections_per_token": 10,
            "min_activation_level": 0.1
        }
        self.violations_count = 0
        print("‚úÖ DNAGuardian initialized")
    
    @EventHandler.on(
        EventType.TOKEN_CREATED,
        subscription_name="dna_token_validator"
    )
    async def validate_token_creation(self, event: Event):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ DNA –ø—Ä–∞–≤–∏–ª–∞–º"""
        token_id = event.payload.get("token_id")
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        is_valid = True
        
        if is_valid:
            print(f"‚úÖ DNAGuardian: Token {token_id} validated")
        else:
            print(f"‚ùå DNAGuardian: Token {token_id} violates constraints")
            await self.emit(
                EventType.DNA_CONSTRAINT_VIOLATED,
                payload={
                    "token_id": token_id,
                    "violation_type": "invalid_structure"
                },
                priority=EventPriority.CRITICAL
            )
    
    @EventHandler.on(
        EventType.GRAPH_CONNECTION_ADDED,
        subscription_name="dna_connection_validator"
    )
    async def validate_connection(self, event: Event):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–≤—è–∑–∏ –ø–æ DNA –ø—Ä–∞–≤–∏–ª–∞–º"""
        connection = event.payload.get("connection")
        print(f"‚úÖ DNAGuardian: Connection {connection['source']} -> {connection['target']} validated")
    
    async def mutate_dna(self, mutation_type: str, changes: dict):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ DNA"""
        old_constraints = self.constraints.copy()
        self.constraints.update(changes)
        
        print(f"üß¨ DNAGuardian: DNA mutated ({mutation_type})")
        print(f"   Changes: {changes}")
        
        await self.emit(
            EventType.DNA_MUTATED,
            payload={
                "mutation_type": mutation_type,
                "changes": changes,
                "old_constraints": old_constraints,
                "new_constraints": self.constraints
            },
            priority=EventPriority.HIGH
        )


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 4: AutoGraphBuilder - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
# =============================================================================

class AutoGraphBuilder:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    
    def __init__(self, graph_manager: GraphManager):
        self.graph_manager = graph_manager
        self.last_token_id = None
        print("‚úÖ AutoGraphBuilder initialized")
    
    @EventHandler.on(
        EventType.TOKEN_CREATED,
        subscription_name="auto_link_tokens"
    )
    async def auto_link_new_token(self, event: Event):
        """–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞, —Å–≤—è–∑–∞—Ç—å –µ–≥–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º"""
        new_token_id = event.payload.get("token_id")
        
        if self.last_token_id and self.last_token_id != new_token_id:
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            await self.graph_manager.add_connection(
                self.last_token_id,
                new_token_id,
                weight=0.8,
                connection_type="auto"
            )
            
            print(f"ü§ñ AutoGraphBuilder: Auto-linked {self.last_token_id} -> {new_token_id}")
        
        self.last_token_id = new_token_id


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 5: EventLogger - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =============================================================================

class EventLogger:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
    
    def __init__(self):
        self.event_log = []
        print("‚úÖ EventLogger initialized")
    
    @EventHandler.on(
        min_priority=EventPriority.HIGH,
        subscription_name="high_priority_logger"
    )
    async def log_important_events(self, event: Event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        self.event_log.append(event)
        print(f"üìù EventLogger: Logged {event.type.value} (priority={event.priority.name})")
    
    @EventHandler.on(
        categories=[EventCategory.ERROR],
        subscription_name="error_logger"
    )
    async def log_errors(self, event: Event):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        error_type = event.payload.get("error_type")
        error_msg = event.payload.get("error_message")
        print(f"‚ùå EventLogger: ERROR [{error_type}] {error_msg}")


# =============================================================================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 6: StatisticsCollector - –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
# =============================================================================

class StatisticsCollector:
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ —Å–æ–±—ã—Ç–∏—è—Ö"""
    
    def __init__(self):
        self.stats = {
            "tokens_created": 0,
            "tokens_activated": 0,
            "connections_added": 0,
            "clusters_detected": 0,
            "dna_mutations": 0,
            "errors": 0
        }
        print("‚úÖ StatisticsCollector initialized")
    
    @EventHandler.on(EventType.TOKEN_CREATED)
    async def count_tokens(self, event: Event):
        self.stats["tokens_created"] += 1
    
    @EventHandler.on(EventType.TOKEN_ACTIVATED)
    async def count_activations(self, event: Event):
        self.stats["tokens_activated"] += 1
    
    @EventHandler.on(EventType.GRAPH_CONNECTION_ADDED)
    async def count_connections(self, event: Event):
        self.stats["connections_added"] += 1
    
    @EventHandler.on(EventType.GRAPH_CLUSTER_DETECTED)
    async def count_clusters(self, event: Event):
        self.stats["clusters_detected"] += 1
    
    @EventHandler.on(EventType.DNA_MUTATED)
    async def count_mutations(self, event: Event):
        self.stats["dna_mutations"] += 1
    
    @EventHandler.on(categories=[EventCategory.ERROR])
    async def count_errors(self, event: Event):
        self.stats["errors"] += 1
    
    def print_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*70)
        print("üìä Statistics Summary")
        print("="*70)
        for key, value in self.stats.items():
            print(f"   {key.replace('_', ' ').title()}: {value}")
        print("="*70 + "\n")


# =============================================================================
# –ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
# =============================================================================

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("="*70)
    print("Starting NeuroGraph OS Event System Integration Demo")
    print("="*70 + "\n")
    
    # 1. –ó–∞–ø—É—Å–∫–∞–µ–º Event Bus
    print("üöÄ Step 1: Starting Event Bus...")
    event_bus = await start_event_bus(max_queue_size=1000, enable_metrics=True)
    print("‚úÖ Event Bus started\n")
    
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    EventHandler.set_event_bus(event_bus)
    
    # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    print("üîß Step 2: Initializing components...")
    token_service = TokenService(event_bus)
    graph_manager = GraphManager(event_bus)
    dna_guardian = DNAGuardian(event_bus)
    auto_builder = AutoGraphBuilder(graph_manager)
    event_logger = EventLogger()
    stats_collector = StatisticsCollector()
    print()
    
    # 4. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    print("üìã Step 3: Registering event handlers...")
    EventHandler.register_all()
    print("‚úÖ All handlers registered\n")
    
    # –ü–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(0.1)
    
    print("="*70)
    print("üöÄ Starting Event Generation...")
    print("="*70 + "\n")
    
    # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–≤—è–∑–µ–π)
    print("üì¶ Scenario 1: Creating tokens...\n")
    
    await token_service.create_token(
        token_id="token_001",
        coordinates=[10, 20, 5],
        data={"type": "data", "value": 42}
    )
    await asyncio.sleep(0.1)
    
    await token_service.create_token(
        token_id="token_002",
        coordinates=[15, 25, 8],
        data={"type": "neural", "activation": 0.9}
    )
    await asyncio.sleep(0.1)
    
    await token_service.create_token(
        token_id="token_003",
        coordinates=[20, 30, 10],
        data={"type": "experience"}
    )
    await asyncio.sleep(0.1)
    
    print()
    print("-"*70 + "\n")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    print("üîÑ Scenario 2: Updating and activating tokens...\n")
    
    await token_service.update_token(
        "token_001",
        {"value": 100, "updated": True}
    )
    await asyncio.sleep(0.1)
    
    await token_service.activate_token("token_002", activation_level=0.95)
    await asyncio.sleep(0.1)
    
    await token_service.activate_token("token_003", activation_level=0.65)
    await asyncio.sleep(0.1)
    
    print()
    print("-"*70 + "\n")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞
    print("üéØ Scenario 3: Creating more tokens to trigger cluster detection...\n")
    
    for i in range(4, 7):
        await token_service.create_token(
            token_id=f"token_00{i}",
            coordinates=[25 + i*5, 35 + i*5, 15 + i*2],
            data={"type": "cluster_member", "index": i}
        )
        await asyncio.sleep(0.1)
    
    print()
    print("-"*70 + "\n")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ú—É—Ç–∞—Ü–∏—è DNA
    print("üß¨ Scenario 4: DNA mutation...\n")
    
    await dna_guardian.mutate_dna(
        "expand_capacity",
        {"max_tokens": 2000, "max_connections_per_token": 20}
    )
    await asyncio.sleep(0.1)
    
    print()
    print("-"*70 + "\n")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏)
    print("‚ùå Scenario 5: Triggering an error...\n")
    
    await token_service.update_token("token_999", {"value": 1})
    await asyncio.sleep(0.1)
    
    print()
    print("-"*70 + "\n")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 6: –†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏
    print("üîó Scenario 6: Manual connection creation...\n")
    
    await graph_manager.add_connection(
        "token_001",
        "token_005",
        weight=1.5,
        connection_type="manual"
    )
    await asyncio.sleep(0.1)
    
    print()
    print("="*70 + "\n")
    
    # 6. –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä Final Results\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    stats_collector.print_stats()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Event Bus
    print("üìà Event Bus Metrics:")
    print("="*70)
    metrics = event_bus.get_metrics()
    if metrics:
        print(f"   Total events published: {metrics['total_published']}")
        print(f"   Total events delivered: {metrics['total_delivered']}")
        print(f"   Delivery rate: {metrics['delivery_rate']:.2%}")
        print()
        print("   Events by type:")
        for event_type, count in sorted(metrics['events_by_type'].items()):
            print(f"      {event_type}: {count}")
        print()
        print("   Events by priority:")
        for priority, count in sorted(metrics['events_by_priority'].items()):
            print(f"      {priority}: {count}")
    print("="*70 + "\n")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    print("üîå Subscriptions Info:")
    print("="*70)
    info = event_bus.get_subscriptions_info()
    print(f"   Total subscriptions: {info['total_subscriptions']}")
    print(f"   Queue size: {info['queue_size']}")
    print(f"   Is running: {info['is_running']}")
    print()
    print("   Named subscriptions:")
    for name, sub_info in info['named_subscriptions'].items():
        print(f"      {name}:")
        print(f"         Subscriber: {sub_info['subscriber_id']}")
        print(f"         Calls: {sub_info['call_count']}")
    print("="*70 + "\n")
    
    # 7. Graceful shutdown
    print("üõë Shutting down Event Bus...")
    await stop_event_bus()
    print("‚úÖ Event Bus stopped\n")
    
    print("="*70)
    print("‚úÖ Demo completed successfully!")
    print("="*70)
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    Integration Successful!                          ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  This demo showed:                                                  ‚ïë
‚ïë  ‚úì TokenService generating events                                  ‚ïë
‚ïë  ‚úì GraphManager reacting to tokens                                 ‚ïë
‚ïë  ‚úì DNAGuardian validating operations                               ‚ïë
‚ïë  ‚úì AutoGraphBuilder creating automatic connections                 ‚ïë
‚ïë  ‚úì EventLogger logging important events                            ‚ïë
‚ïë  ‚úì StatisticsCollector tracking everything                         ‚ïë
‚ïë  ‚úì Event chains (Token ‚Üí Connection ‚Üí Cluster)                     ‚ïë
‚ïë  ‚úì Error handling through events                                   ‚ïë
‚ïë  ‚úì Priority-based event delivery                                   ‚ïë
‚ïë  ‚úì Metrics and monitoring                                          ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  The Event System is the heartbeat of NeuroGraph OS!              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)


if __name__ == "__main__":
    asyncio.run(main())
():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Event System"""
    
    print("=" * 70)
    print("NeuroGraph OS - Event System Demo")
    print("=" * 70)
    print()
    
    # 1. –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Event Bus
    event_bus = EventBus(
        max_queue_size=1000,
        enable_metrics=True,
        log_events=False
    )
    await event_bus.start()
    print("‚úÖ Event Bus started\n")
    
    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —à–∏–Ω—É –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
    EventHandler.set_event_bus(event_bus)
    
    # 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    token_service = TokenService(event_bus)
    graph_manager = GraphManager(event_bus)
    dna_guardian = DNAGuardian(event_bus)
    
    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    handlers = EventHandlers()
    auto_builder = AutoGraphBuilder(event_bus, graph_manager)
    
    # 5. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    EventHandler.register_all()
    print("‚úÖ All handlers registered\n")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(0.1)
    
    print("üöÄ Starting event generation...\n")
    print("-" * 70)
    
    # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Ü–µ–ø–æ—á–∫–∞ —Å–æ–±—ã—Ç–∏–π)
    await token_service.create_token(
        token_id="token_001",
        coordinates=[10, 20, 5],
        data={"type": "data", "value": 42}
    )
    await asyncio.sleep(0.1)
    
    await token_service.create_token(
        token_id="token_002",
        coordinates=[15, 25, 8],
        data={"type": "neural", "activation": 0.9}
    )
    await asyncio.sleep(0.1)
    
    await token_service.create_token(
        token_id="token_003",
        coordinates=[20, 30, 10],
        data={"type": "experience"}
    )
    await asyncio.sleep(0.1)
    
    print("-" * 70)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    await token_service.update_token(
        "token_001",
        {"value": 100}
    )
    await asyncio.sleep(0.1)
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    await token_service.activate_token("token_002", activation_level=0.95)
    await asyncio.sleep(0.1)
    
    print("-" * 70)
    
    # –ú—É—Ç–∞—Ü–∏—è DNA
    await dna_guardian.mutate_dna(
        "expand_capacity",
        {"max_tokens": 2000}
    )
    await asyncio.sleep(0.1)
    
    print("-" * 70)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏)
    await token_service.update_token("token_999", {"value": 1})
    await asyncio.sleep(0.1)
    
    print("-" * 70)
    print()
    
    # 7. –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä Statistics:")
    print("-" * 70)
    
    metrics = event_bus.get_metrics()
    if metrics:
        print(f"Total events published: {metrics['total_published']}")
        print(f"Total events delivered: {metrics['total_delivered']}")
        print(f"Delivery rate: {metrics['delivery_rate']:.2%}")
        print()
        print("Events by type:")
        for event_type, count in metrics['events_by_type'].items():
            print(f"  {event_type}: {count}")
        print()
    
    info = event_bus.get_subscriptions_info()
    print(f"Total subscriptions: {info['total_subscriptions']}")
    print(f"Named subscriptions: {len(info['named_subscriptions'])}")
    print()
    
    print(f"Processed tokens: {len(handlers.processed_tokens)}")
    print(f"Graph updates: {len(handlers.graph_updates)}")
    print()
    
    # 8. Graceful shutdown
    print("üõë Shutting down Event Bus...")
    await event_bus.stop()
    print("‚úÖ Event Bus stopped")
    print()
    print("=" * 70)
    print("Demo completed successfully!")
    print("=" * 70)


if __name__ == "__main__":
    asyncio.run(main())