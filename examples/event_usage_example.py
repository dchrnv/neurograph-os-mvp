"""
NeuroGraph OS - Event System Usage Examples
–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GlobalEventBus

–ü—É—Ç—å: examples/event_usage_example.py
"""

import asyncio
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç Event System
from core.events import (
    # –ú–æ–¥–µ–ª–∏
    Event, EventType, EventCategory, EventPriority,
    
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã
    EventHandler, EventEmitter,
    
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ (—Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã)
    GlobalEventBus,
    get_event_bus,
    start_event_bus,
    stop_event_bus,
    EventBusContext,
    with_event_bus
)


print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë           NeuroGraph OS - Event System Usage Examples             ‚ïë
‚ïë                     4 Different Approaches                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
""")


# =============================================================================
# –ü–æ–¥—Ö–æ–¥ 1: –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Explicit Management)
# =============================================================================

async def approach_1_explicit():
    """
    –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º Event Bus
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    print("\n" + "="*70)
    print("Approach 1: Explicit Management")
    print("="*70 + "\n")
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫
    print("üöÄ Starting Event Bus...")
    bus = await GlobalEventBus.start(
        max_queue_size=1000,
        enable_metrics=True,
        log_events=False
    )
    print("‚úÖ Event Bus started\n")
    
    # 2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    received_events = []
    
    async def my_handler(event: Event):
        received_events.append(event)
        print(f"   üì® Received: {event.type.value}")
        print(f"      Source: {event.source}")
        print(f"      Payload: {event.payload}\n")
    
    bus.subscribe(
        handler=my_handler,
        subscriber_id="my_module"
    )
    print("‚úÖ Subscribed to events\n")
    
    # 3. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    print("üì§ Publishing events...\n")
    
    event1 = Event(
        type=EventType.SYSTEM_STARTED,
        category=EventCategory.SYSTEM,
        source="system",
        payload={"version": "1.0.0", "approach": "explicit"}
    )
    await bus.publish(event1)
    
    event2 = Event(
        type=EventType.TOKEN_CREATED,
        category=EventCategory.TOKEN,
        source="token_service",
        payload={"token_id": "tok_001", "approach": "explicit"}
    )
    await bus.publish(event2)
    
    # –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await asyncio.sleep(0.2)
    
    # 4. –ú–µ—Ç—Ä–∏–∫–∏
    print("üìä Metrics:")
    metrics = bus.get_metrics()
    print(f"   Total published: {metrics['total_published']}")
    print(f"   Total delivered: {metrics['total_delivered']}")
    print(f"   Received by handler: {len(received_events)}\n")
    
    # 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞
    print("üõë Stopping Event Bus...")
    await GlobalEventBus.stop()
    print("‚úÖ Event Bus stopped\n")


# =============================================================================
# –ü–æ–¥—Ö–æ–¥ 2: Convenience Functions (–£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
# =============================================================================

async def approach_2_convenience():
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ convenience functions
    –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–¥, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤
    """
    print("\n" + "="*70)
    print("Approach 2: Convenience Functions")
    print("="*70 + "\n")
    
    # 1. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ convenience function
    print("üöÄ Starting Event Bus (convenience)...")
    await start_event_bus()
    print("‚úÖ Event Bus started\n")
    
    # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏–Ω—ã —á–µ—Ä–µ–∑ convenience function
    bus = get_event_bus()
    
    # 3. –ü–æ–¥–ø–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    EventHandler.set_event_bus(bus)
    
    @EventHandler.on(EventType.TOKEN_CREATED)
    async def handle_token_creation(event: Event):
        print(f"   üì® Token created: {event.payload['token_id']}")
    
    EventHandler.register_all()
    print("‚úÖ Handler registered\n")
    
    # 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    print("üì§ Publishing event...\n")
    event = Event(
        type=EventType.TOKEN_CREATED,
        category=EventCategory.TOKEN,
        source="token_service",
        payload={"token_id": "tok_002", "approach": "convenience"}
    )
    await bus.publish(event)
    
    await asyncio.sleep(0.1)
    
    # 5. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ convenience function
    print("\nüõë Stopping Event Bus...")
    await stop_event_bus()
    print("‚úÖ Event Bus stopped\n")


# =============================================================================
# –ü–æ–¥—Ö–æ–¥ 3: Context Manager (–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä)
# =============================================================================

async def approach_3_context_manager():
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ context manager
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    """
    print("\n" + "="*70)
    print("Approach 3: Context Manager")
    print("="*70 + "\n")
    
    print("üöÄ Starting Event Bus (context manager)...\n")
    
    async with EventBusContext(max_queue_size=500) as bus:
        # –®–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∑–¥–µ—Å—å
        print("‚úÖ Event Bus started (automatic)\n")
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å —Å EventEmitter
        class MyService(EventEmitter):
            def __init__(self, event_bus):
                super().__init__(event_bus, source_id="my_service")
            
            async def do_work(self, data: Dict[str, Any]):
                print(f"   üîß Processing: {data}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ emit
                await self.emit(
                    EventType.TOKEN_CREATED,
                    payload={"token_id": data["id"], "approach": "context_manager"}
                )
        
        service = MyService(bus)
        
        # –ü–æ–¥–ø–∏—Å–∫–∞
        @EventHandler.on(EventType.TOKEN_CREATED)
        async def handle_event(event: Event):
            print(f"   üì® Event received: {event.payload}\n")
        
        EventHandler.set_event_bus(bus)
        EventHandler.register_all()
        
        # –†–∞–±–æ—Ç–∞
        print("üì§ Service doing work...\n")
        await service.do_work({"id": "tok_003"})
        
        await asyncio.sleep(0.1)
    
    # –®–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
    print("‚úÖ Event Bus stopped (automatic)\n")


# =============================================================================
# –ü–æ–¥—Ö–æ–¥ 4: Decorator (–î–µ–∫–æ—Ä–∞—Ç–æ—Ä)
# =============================================================================

@with_event_bus(max_queue_size=500, enable_metrics=True)
async def approach_4_decorator():
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ @with_event_bus
    –°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–¥, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    """
    print("\n" + "="*70)
    print("Approach 4: Decorator")
    print("="*70 + "\n")
    
    # –®–∏–Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º!
    print("‚úÖ Event Bus started (by decorator)\n")
    
    bus = get_event_bus()
    
    # –°–µ—Ä–≤–∏—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
    class TokenService(EventEmitter):
        def __init__(self):
            super().__init__(get_event_bus(), source_id="token_service")
        
        async def create_token(self, token_id: str):
            print(f"   üéØ Creating token: {token_id}")
            await self.emit(
                EventType.TOKEN_CREATED,
                payload={"token_id": token_id, "approach": "decorator"}
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @EventHandler.on(EventType.TOKEN_CREATED, min_priority=EventPriority.NORMAL)
    async def log_token(event: Event):
        print(f"   üìù Logged: {event.payload['token_id']}")
    
    @EventHandler.on(EventType.TOKEN_CREATED)
    async def analyze_token(event: Event):
        print(f"   üîç Analyzed: {event.payload['token_id']}\n")
    
    EventHandler.set_event_bus(bus)
    EventHandler.register_all()
    
    # –†–∞–±–æ—Ç–∞
    service = TokenService()
    
    print("üì§ Creating tokens...\n")
    await service.create_token("tok_004")
    await service.create_token("tok_005")
    
    await asyncio.sleep(0.2)
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    metrics = bus.get_metrics()
    print("üìä Final metrics:")
    print(f"   Published: {metrics['total_published']}")
    print(f"   Delivered: {metrics['total_delivered']}")
    print(f"   Events by type: {metrics['events_by_type']}\n")
    
    # –®–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    print("‚úÖ Event Bus will stop automatically\n")


# =============================================================================
# –ë–æ–Ω—É—Å: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
# =============================================================================

@with_event_bus()
async def bonus_full_integration():
    """
    –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
    """
    print("\n" + "="*70)
    print("BONUS: Full Integration Example")
    print("="*70 + "\n")
    
    bus = get_event_bus()
    EventHandler.set_event_bus(bus)
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 1: TokenService
    class TokenService(EventEmitter):
        def __init__(self):
            super().__init__(bus, source_id="token_service")
            self.tokens = {}
        
        async def create_token(self, token_id: str, data: Dict[str, Any]):
            self.tokens[token_id] = data
            await self.emit(
                EventType.TOKEN_CREATED,
                payload={"token_id": token_id, **data},
                priority=EventPriority.HIGH if data.get("important") else EventPriority.NORMAL
            )
            return token_id
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: GraphManager (—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–æ–∫–µ–Ω—ã)
    class GraphManager(EventEmitter):
        def __init__(self):
            super().__init__(bus, source_id="graph_manager")
            self.connections = []
        
        @EventHandler.on(EventType.TOKEN_CREATED)
        async def auto_connect_token(self, event: Event):
            token_id = event.payload["token_id"]
            
            if len(self.connections) > 0:
                last_token = self.connections[-1]["target"]
                connection = {"source": last_token, "target": token_id}
                self.connections.append(connection)
                
                print(f"   üîó Auto-connected: {last_token} -> {token_id}")
                
                await self.emit(
                    EventType.GRAPH_CONNECTION_ADDED,
                    payload=connection
                )
            else:
                self.connections.append({"source": None, "target": token_id})
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: Monitor (—Å–ª–µ–¥–∏—Ç –∑–∞ –≤—Å–µ–º)
    class SystemMonitor:
        def __init__(self):
            self.stats = {"tokens": 0, "connections": 0}
        
        @EventHandler.on(EventType.TOKEN_CREATED)
        async def count_tokens(self, event: Event):
            self.stats["tokens"] += 1
            print(f"   üìä Stats: {self.stats['tokens']} tokens created")
        
        @EventHandler.on(EventType.GRAPH_CONNECTION_ADDED)
        async def count_connections(self, event: Event):
            self.stats["connections"] += 1
            print(f"   üìä Stats: {self.stats['connections']} connections created")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("üîß Initializing components...\n")
    token_service = TokenService()
    graph_manager = GraphManager()
    monitor = SystemMonitor()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    EventHandler.register_all()
    print("‚úÖ All handlers registered\n")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    print("üöÄ Simulating system activity...\n")
    
    await token_service.create_token("tok_001", {"type": "data", "value": 42})
    await asyncio.sleep(0.05)
    
    await token_service.create_token("tok_002", {"type": "neural", "important": True})
    await asyncio.sleep(0.05)
    
    await token_service.create_token("tok_003", {"type": "experience", "value": 100})
    await asyncio.sleep(0.05)
    
    print("\nüìà Final Statistics:")
    print(f"   Tokens created: {monitor.stats['tokens']}")
    print(f"   Connections created: {monitor.stats['connections']}")
    print(f"   Total events: {bus.get_metrics()['total_published']}\n")


# =============================================================================
# Main - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
# =============================================================================

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏"""
    
    # –ü–æ–¥—Ö–æ–¥ 1
    await approach_1_explicit()
    GlobalEventBus.reset()  # –°–±—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    await asyncio.sleep(0.5)
    
    # –ü–æ–¥—Ö–æ–¥ 2
    await approach_2_convenience()
    GlobalEventBus.reset()
    await asyncio.sleep(0.5)
    
    # –ü–æ–¥—Ö–æ–¥ 3
    await approach_3_context_manager()
    GlobalEventBus.reset()
    await asyncio.sleep(0.5)
    
    # –ü–æ–¥—Ö–æ–¥ 4
    await approach_4_decorator()
    GlobalEventBus.reset()
    await asyncio.sleep(0.5)
    
    # Bonus
    await bonus_full_integration()
    
    print("\n" + "="*70)
    print("‚úÖ All examples completed successfully!")
    print("="*70 + "\n")
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         Summary                                     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë                                                                     ‚ïë
‚ïë  Approach 1: Explicit Management                                   ‚ïë
‚ïë  ‚úì Maximum control                                                 ‚ïë
‚ïë  ‚úì Good for complex scenarios                                      ‚ïë
‚ïë  ‚ö† Requires manual lifecycle management                            ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  Approach 2: Convenience Functions                                 ‚ïë
‚ïë  ‚úì Simple and readable                                             ‚ïë
‚ïë  ‚úì Recommended for most cases                                      ‚ïë
‚ïë  ‚úì Easy to understand                                              ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  Approach 3: Context Manager                                       ‚ïë
‚ïë  ‚úì Automatic lifecycle management                                  ‚ïë
‚ïë  ‚úì Guaranteed cleanup                                              ‚ïë
‚ïë  ‚úì Good for scoped operations                                      ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  Approach 4: Decorator                                             ‚ïë
‚ïë  ‚úì Shortest code                                                   ‚ïë
‚ïë  ‚úì Perfect for async main functions                                ‚ïë
‚ïë  ‚úì Clean and elegant                                               ‚ïë
‚ïë                                                                     ‚ïë
‚ïë  Bonus: Full Integration                                           ‚ïë
‚ïë  ‚úì Real-world example                                              ‚ïë
‚ïë  ‚úì Multiple components interacting                                 ‚ïë
‚ïë  ‚úì Event chains and reactions                                      ‚ïë
‚ïë                                                                     ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  Choose the approach that fits your needs!                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)


if __name__ == "__main__":
    asyncio.run(main())