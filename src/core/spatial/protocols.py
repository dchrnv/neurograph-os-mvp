from typing import Protocol, List, Dict, Optional, Tuple

from .coordinates import Point3D, Region3D, MultiCoordinate, LevelStats
from ..token.token import Token

class SpatialIndexProtocol(Protocol):
    def insert(self, point: Point3D, token: Token) -> None: ...
    def remove(self, point: Point3D, token_id: int) -> bool: ...
    def query_point(self, point: Point3D) -> List[Token]: ...
    def query_region(self, region: Region3D) -> List[Token]: ...
    def query_radius(self, center: Point3D, radius: float) -> List[Token]: ...
    def get_bounds(self) -> Optional[Region3D]: ...
    def get_count(self) -> int: ...

    # optional APIs
    def get_stats(self) -> LevelStats: ...
    def get_density_map(self, resolution: float) -> Dict[Region3D, int]: ...
    def reindex_all(self, token_registry: Dict[int, MultiCoordinate]) -> None: ...
    def rescale(self, old_scale: float, new_scale: float) -> None: ...
    def set_scale(self, scale: float) -> None: ...
    def update_scale(self, scale: float) -> None: ...
