{
  "neurograph_os": {
  "version": "0.9.0",
  "architecture_style": "clean-architecture-with-hexagonal",
  "status": "В разработке (v0.9 - Реализован WebSocket-сервер, интеграция с EventBus, подписки на каналы)",
  "last_updated": "2025-10-15",
    
    "core_principles": {
      "token_based_computing": "Токен-ориентированные вычисления",
      "spatial_intelligence": "Пространственное представление данных и знаний",
      "modular_design": "Модульная и расширяемая архитектура",
      "configuration_driven": "Гибкая настройка через YAML-конфигурацию"
    },

    "architecture_layers": {
      "core": {
        "purpose": "Ядро системы с бизнес-логикой",
        "modules": {
          "token": {
            "responsibility": "Основная сущность для представления данных",
            "components": [
              "Token (реализован, спецификация завершена) — src/core/token/token.py",
              "TokenFactory (реализована) — src/core/token/factory.py",
              "TokenService (реализован, orchestration) — src/core/token/token_service.py",
              "TokenRegistry (планируется)",
              "TokenFactoryConfig (реализован) — конфигурация фабрики токенов"
            ],
            "characteristics": [
              "Бинарный формат (64 байта)",
              "Многомерные координаты (8 уровней по 3 оси)",
              "Метаданные (ID, флаги, вес, временная метка)",
              "Поддержка создания токенов опыта (experience tokens)",
              "Конфигурируемые параметры по умолчанию"
            ]
          },
          "spatial": {
            "responsibility": "Пространственные операции и вычисления",
            "components": [
              "Coordinates (реализован) — src/core/spatial/coordinates.py",
              "SparseGrid / SpatialIndex (реализованы) — src/core/spatial/spatial_index.py",
              "CoordinateSystem (реализован) — src/core/spatial/coordinate_system.py",
              "(другие реализации индексов: SpatialHashIndex)"
            ],
            "characteristics": [
              "3D координаты", 
              "Масштабирование", 
              "Нормализация",
              "Пространственная индексация",
              "Управление разреженной сеткой"
            ]
          },
          "graph": {
            "responsibility": "Графовая система связей между токенами",
            "components": [
              "TokenGraph (реализован, v1.0.0, production) — src/core/graph/graph_engine.py",
              "GraphManager (реализован) — src/core/graph/graph_manager.py",
              "GraphCDNAValidator (реализован) — валидация операций по CDNA",
              "Enhanced Connections (реализовано) — расширенное хранение и метаданные связей",
              "Subgraph / GraphStats / TokenFlags / Encoders (реализованы)",
              "Конфигурация графа — config/core/token_graph.yaml",
              "Спецификация CDNA для графа — config/specs/graph_cdna_spec.json",
              "ShortTermMemory (планируется)",
              "LongTermMemory (планируется)"
            ],
            "characteristics": [
              "Управление графом и индекс связей",
              "Автоматические связи: пространственные и временные",
              "Статистика графа (степень, кластеризация, компоненты) и центральность",
              "Генетические операторы: мутации, кроссовер, селекция",
              "Фитнес-графа и поколения (generation tracking)",
              "Расширенные связи: идентификаторы, метаданные, направление, вес/затухание",
              "CDNA-валидация операций и ограничений (на основе graph_cdna_spec.json)",
              "Интеграция Experience Stream (запись событий)",
              "Кэши путей и расстояний"
            ]
          },
          "utils": {
            "responsibility": "Вспомогательные утилиты",
            "components": [
              "Logger (реализован)",
              "ExceptionHandler (планируется)",
              "BinaryUtils (планируется)",
              "Validators (планируется)"
            ],
            "characteristics": [
              "Логирование",
              "Обработка ошибок",
              "Утилитарные функции",
              "Работа с бинарными данными",
              "Валидация"
            ]
          },
          "memory": {
            "responsibility": "Управление памятью и кэшированием",
            "components": [
              "MemoryManager (планируется)",
              "CacheStrategies (планируется)"
            ],
            "characteristics": [
              "Кэширование данных",
              "Управление памятью",
              "Стратегии вытеснения"
            ]
          }
          ,
          "dna": {
            "responsibility": "Управление структурой 'ДНК' проекта: схемы, парсинг и шаблоны поведения",
            "components": [
              "DNASpec (создан, спецификации в config/specs/dna_config.json)",
              "DNAGuardian (реализован) — src/core/dna/guardian/guardian.py",
              "GenomeParser (планируется)"
            ],
            "characteristics": [
              "Версионируемая спецификация",
              "Валидация конфигураций",
              "Интеграция с runtime-параметрами"
            ]
          },
          "experience": {
            "responsibility": "Сбор, хранение и передача событий опыта (Experience) для обучения и анализа",
            "components": [
              "ExperienceEvent (Pydantic model) — src/core/experience/event.py (реализован)",
              "ExperienceStream — src/core/experience/stream.py (реализован)",
              "ExperienceTrajectory — хранение последовательностей событий",
              "ExperienceBatch — пакетная обработка событий",
              "CircularBuffer / SlidingWindow — потокобезопасные структуры хранения",
              "Samplers (uniform, prioritized, recent, diverse) — src/core/experience/samplers.py",
              "Storage backends (console, file, HTTP) — поддержка различных хранилищ",
              "DNAExperienceIntegration — интеграция с DNAGuardian"
            ],
            "characteristics": [
              "Асинхронная буферизация и батчинг событий",
              "Потокобезопасные структуры данных",
              "Гибкая система плагинов для сэмплеров и хранилищ",
              "Поддержка различных форматов сериализации (JSON, MessagePack)",
              "Метрики и мониторинг производительности",
              "Конфигурация через YAML/JSON",
              "Интеграция с системой логирования",
              "Поддержка распределенного трейсинга"
            ],
            "events": {
              "responsibility": "Централизованная система событий для асинхронной коммуникации между модулями",
              "components": [
                "Event (базовая модель) — src/core/events/event.py",
                "EventBus (реализован) — src/core/events/event_bus.py",
                "GlobalEventBus (реализован) — src/core/events/global_bus.py (синглтон)",
                "EventSystem (утилиты) — src/core/events/utils.py",
                "Декораторы (реализованы) — src/core/events/decorators.py"
              ],
              "characteristics": [
                "Асинхронная публикация и подписка на события",
                "Поддержка фильтрации событий",
                "Метрики производительности",
                "Гибкая система приоритетов",
                "Потокобезопасная реализация",
                "Поддержка контекстных менеджеров",
                "Интеграция с системой логирования",
                "Гибкая настройка через конфигурационный файл"
              ]
            }  
          },
          "websocket": {
            "responsibility": "Двусторонняя асинхронная связь с клиентами",
            "components": [
              "WebSocketServer (реализован) — src/infrastructure/websocket/server.py",
              "ConnectionManager (реализован) — src/infrastructure/websocket/manager.py",
              "EventBusGateway (реализован) — шлюз для трансляции событий из EventBus в WebSocket",
              "TopicRouter (реализован) — маршрутизация сообщений по каналам (топикам)",
              "AuthMiddleware (реализован) — аутентификация подключений по JWT"
            ],
            "characteristics": [
              "Поддержка переподключения при обрыве связи",
              "Буферизация сообщений при потере соединения",
              "Типизированные сообщения (Pydantic на бэкенде, TypeScript на фронтенде)",
              "Масштабируемая архитектура",
              "Аутентификация и авторизация подключений (реализовано)",
              "Мониторинг состояния соединений",
              "Подписка на каналы (topics) для гранулярного получения данных",
              "Прямая интеграция с `core.events.EventBus` для трансляции системных событий"
            ]
          }
        }
      },

      "application": {
        "purpose": "Сценарии использования и бизнес-правила",
        "services": {
          "token_service": {
            "description": "Сервис для управления жизненным циклом токенов (реализован частично).",
            "operations": [
              "create_token", 
              "update_token", 
              "find_token",
              "delete_token"
            ]
          },
          "spatial_service": {
            "description": "Сервис для выполнения пространственных запросов и управления сеткой (в разработке).",
            "operations": [
              "find_in_region", 
              "get_density_map", 
              "manage_grid_levels"
            ]
          },
          "orchestration_service": {
            "description": "Управление сложными рабочими процессами и задачами (планируется).",
            "components": [
              "WorkflowManager", 
              "TaskScheduler"
            ],
            "characteristics": [
              "Планирование задач",
              "Управление рабочими процессами",
              "Оркестрация сервисов"
            ]
          }
        }
      },

      "infrastructure": {
        "purpose": "Техническая реализация и внешние интеграции",
        "components": {
      "configuration": {
        "description": "Управление конфигурацией (YAML, Env Vars)",
        "components": ["ConfigLoader (реализован) — src/infrastructure/config", "ConfigManager (реализован)"]
          },
          "persistence": {
            "description": "Слой для хранения данных (реализован)",
            "technologies": ["PostgreSQL (реализовано)", "Redis (реализовано)", "Alembic (миграции)", "SQLAlchemy (адаптеры)"],
            "components": [
              "DBAdapters — src/infrastructure/persistence/adapters (реализованы)",
              "Repositories — src/infrastructure/persistence/repositories (реализованы)",
              "Alembic миграции — alembic/ (реализованы)",
              "ConnectionPool / SessionManager — src/infrastructure/persistence/connection.py",
              "PersistenceConfig — config/infrastructure/persistence.yaml"
            ],
            "notes": [
              "Миграции управляются через alembic (alembic.ini присутствует)",
              "Docker-compose конфигурация для БД доступна в deployments/docker/docker-compose.yaml",
              "Тестовые фикстуры и integration tests находятся в tests/integration/"
            ]
          },
          "api": {
            "description": "Реализация внешних API",
            "technologies": ["FastAPI (в разработке)"]
          },
          "messaging": {
            "description": "Асинхронный обмен сообщениями",
            "technologies": ["RabbitMQ (планируется)"]
          },
          "monitoring": {
            "description": "Сбор метрик и отслеживание ошибок",
            "technologies": ["Prometheus (планируется)"]
          },
          "dependency_management": {
            "description": "Управление зависимостями проекта",
            "components": ["RequirementsManager", "requirements_cli.py"]
          }
        }
      },

      "interfaces": {
        "purpose": "Точки входа в систему",
        "entry_points": {
          "http": {
            "description": "HTTP API для внешних систем",
            "endpoints": ["/api/v1/* (в разработке)"]
          },
          "cli": {
            "description": "Командная строка для администрирования, отладки и управления системой (расширена в v0.8)",
            "components": [
              "CLI entrypoint — src/cli/main.py (реализован)",
              "Группы команд — src/cli/commands/ (реализованы)"
            ],
            "commands": [
              {
                "group": "config",
                "description": "Управление конфигурацией (реализована)",
                "subcommands": ["get", "set", "validate", "show-effective"]
              },
              {
                "group": "db",
                "description": "Управление базой данных (реализована)",
                "subcommands": ["migrate", "downgrade", "revision", "seed"]
              },
              {
                "group": "service",
                "description": "Управление сервисами (планируется)",
                "subcommands": ["start", "stop", "status", "restart"]
              },
              {
                "group": "token",
                "description": "Операции с токенами (планируется)",
                "subcommands": ["create", "get", "list", "delete"]
              },
              {
                "group": "graph",
                "description": "Взаимодействие с графом (планируется)",
                "subcommands": ["stats", "query", "connect"]
              }
            ]
          },
          "websocket": {
            "description": "Веб-сокеты для реального времени",
            "channels": [
              "/ws/v1/updates (реализован)",
              "Поддерживаемые топики: 'tokens', 'graph', 'system.metrics', 'dna.violations'",
              "Клиент отправляет JSON-RPC для подписки: `{\"jsonrpc\": \"2.0\", \"method\": \"subscribe\", \"params\": {\"topic\": \"tokens\"}}`"
            ]
          }
        }
      }
    },

    "deployment": {
      "containerization": {
        "docker": "Контейнеризация приложения и его зависимостей (реализовано)",
        "kubernetes": "Оркестрация контейнеров для production-окружения (планируется)"
      }
    },

    "development_workflow": {
      "version_control": "Git",
      "branch_strategy": "GitFlow (рекомендуется)",
      "ci_cd": ["GitHub Actions", "ArgoCD"],
      "code_review": "Pull Requests с обязательным ревью кода",
      "documentation": {
        "architecture": "MkDocs, архитектурные манифесты (JSON)",
        "api": "OpenAPI/Swagger",
        "code": "pdoc с Google-style docstrings",
        "entities": "Подробные спецификации в Markdown (.md)",
        "configuration": "Единый документ по структуре конфигурации",
        "site": "MkDocs с Material for MkDocs",
        "setup": "Подробное руководство по настройке",
        "development": "Руководство для разработчиков",
        "testing_docs": "Руководство по тестированию"
      },
      "testing": {
        "unit_tests": "pytest",
        "integration_tests": "pytest с Docker-контейнерами",
        "e2e_tests": "Playwright"
      }
      
    }
  }
}
